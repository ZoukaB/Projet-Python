import sys
import pygame
import random
from UnitFinal import *
from DisplayFinal import *
from PersonnagesFinal import *

# A terme, remplacer par vraies statistiques des personnages dans la fonction remplacer Unit par nos classes Personnages
class GameObject:
    def __init__(self, x, y, obj_type):
        self.x = x
        self.y = y
        self.obj_type = obj_type

        # Image object type
        if obj_type == "piedra":
            self.image = pygame.image.load("rock.png").convert_alpha()
            self.image = pygame.transform.scale(self.image, (CELL_SIZE, CELL_SIZE))
        else:
            self.image = pygame.Surface((CELL_SIZE, CELL_SIZE))
            self.image.fill((255, 0, 0))  # unknown objects in red color

    def draw(self, screen):
        screen.blit(self.image, (self.x * CELL_SIZE, self.y * CELL_SIZE))


class Game:
    def __init__(self, screen):
        self.screen = screen
        self.player1_units = []
        self.player2_units = []
        self.reset_jeu = False  # Flag to indicate a reset
        self.display = Display(self.screen,self)
        
        # Generate objects at the beginning of the game
        self.generate_objects()

    def generate_objects(self):
        """Generate rocks and other objects on the map."""
        for _ in range(10):  # Number of objects
            x, y = random.randint(0, GRID_COLUMNS - 1), random.randint(0, GRID_ROWS - 1)
            self.display.objects.append(GameObject(x, y, "piedra"))
    
    def is_cell_occupied(self, x, y):
        """Verify if cell is occupied by an object (like a rock)."""
        for obj in self.display.objects:  # Itera on the objects on the map
            if obj.x == x and obj.y == y:
                return True  # If there is an object, return True
        return False  # If there is not, return False  

    def pause_menu(self):
        """Displays the pause menu with options to resume or go back to the home screen."""
        font = pygame.font.Font(None, 48)
        button_font = pygame.font.Font(None, 36)

        # Create buttons for "Resume" and "Home Screen"
        button_width = 250
        button_height = 60
        button_spacing = 40

        # Calculate button positions
        resume_button = pygame.Rect(WIDTH // 2 - button_width // 2, HEIGHT // 2 - button_height - button_spacing, button_width, button_height)
        home_button = pygame.Rect(WIDTH // 2 - button_width // 2, HEIGHT // 2 + button_spacing, button_width, button_height)

        # Semi-transparent overlay
        overlay = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
        overlay.fill((0, 0, 0, 150))  # Black with 150 alpha for transparency

        paused = True
        while paused:
            # Draw the current game screen with the overlay
            self.screen.blit(overlay, (0, 0))

            # Draw the "Pause" title
            pause_text = font.render("Game Paused", True, WHITE)
            self.screen.blit(pause_text, (WIDTH // 2 - pause_text.get_width() // 2, HEIGHT // 4))

            # Draw the "Resume" button
            pygame.draw.rect(self.screen, WHITE, resume_button)
            resume_text = button_font.render("Resume", True, BLACK)
            self.screen.blit(resume_text, (resume_button.x + (resume_button.width - resume_text.get_width()) // 2,
                                           resume_button.y + (resume_button.height - resume_text.get_height()) // 2))

            # Draw the "Home Screen" button
            pygame.draw.rect(self.screen, WHITE, home_button)
            home_text = button_font.render("Home Screen", True, BLACK)
            self.screen.blit(home_text, (home_button.x + (home_button.width - home_text.get_width()) // 2,
                                         home_button.y + (home_button.height - home_text.get_height()) // 2))

            # Event handling
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()

                if event.type == pygame.MOUSEBUTTONDOWN:
                    mouse_pos = pygame.mouse.get_pos()

                    # Check if "Resume" button was clicked
                    if resume_button.collidepoint(mouse_pos):
                        paused = False  # Resume the game

                    # Check if "Home Screen" button was clicked
                    if home_button.collidepoint(mouse_pos):
                        self.reset_game()  
                        self.reset_jeu = True  # Set the reset flag to restart the main loop
                        paused = False

                if event.type == pygame.KEYDOWN:
                    # Press "Esc" to resume the game
                    if event.key == pygame.K_ESCAPE:
                        paused = False

            pygame.display.flip()

    def check_victory(self):
        """Verify if there's a winner."""
        if not self.player1_units:
            self.display.show_victory_message("Player 2 wins!", confetti_color=(255, 0, 0))  # Red for player 2
        elif not self.player2_units:
            self.display.show_victory_message("Player 1 wins!", confetti_color=(0, 0, 255))  # Blue for player 1

    def reset_game(self):
        """Resets the game state for a fresh start."""
        self.player1_units = []
        self.player2_units = [] 
        self.reset_jeu = False  # Reset the flag for a clean restart

    def handle_player_turn(self, selected_unit):
        hovered_cell = (selected_unit.x, selected_unit.y)
        proposed_x, proposed_y = selected_unit.x, selected_unit.y
        
        if self.reset_jeu:
            return  # Exit immediately if reset_jeu is True

        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    exit()

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        self.pause_menu()

                    # Handle movement keys
                    dx, dy = 0, 0
                    if event.key == pygame.K_UP:
                        dy = -1
                    elif event.key == pygame.K_DOWN:
                        dy = 1
                    elif event.key == pygame.K_LEFT:
                        dx = -1
                    elif event.key == pygame.K_RIGHT:
                        dx = 1
                    elif event.key == pygame.K_SPACE:
                        # Confirm the move if it's within range and valid
                        final_dx = proposed_x - selected_unit.x
                        final_dy = proposed_y - selected_unit.y
                        if abs(final_dx) + abs(final_dy) <= selected_unit.mouvement:
                            if not self.is_cell_occupied(proposed_x, proposed_y):
                                if selected_unit.move(final_dx, final_dy, self.player1_units + self.player2_units):
                                    return
                                else:
                                    self.display.show_message("You can't move, cell is occupied!")
                            else:
                                self.display.show_message("You can't move, cell is occupied by an obstacle!")
                            break
                    # Update proposed cell position with arrow keys
                    if dx != 0 or dy != 0:
                        new_x = proposed_x + dx
                        new_y = proposed_y + dy
                        # Check if within movement range and grid boundaries
                        if (abs(new_x - selected_unit.x) + abs(new_y - selected_unit.y)) <= selected_unit.mouvement:
                            if 0 <= new_x < GRID_COLUMNS and 0 <= new_y < GRID_ROWS:
                                proposed_x, proposed_y = new_x, new_y
                                hovered_cell = (proposed_x, proposed_y)
                    
            # Update the display
            self.display.flip_display(selected_unit, hovered_cell)
            pygame.display.flip()

    def handle_player1_attack(self, selected_unit):
        capacity_used = False  # Flag to track if capacity has been used during this turn

        if self.reset_jeu:
            return  # Exit immediately if reset_jeu is True

        if selected_unit:
            # Show action options when unit is selected
            self.display.affiche_message_centre("Que voulez-vous faire ? Attaquer (A), Utiliser une capacité (Tab) puis attaquer")

        # Find enemies within attack range
        enemies_in_range = [
            enemy for enemy in self.player2_units
            if max(abs(enemy.x - selected_unit.x), abs(enemy.y - selected_unit.y)) <= selected_unit.attack_range
        ]

        selected_enemy_index = 0  # Index to track which enemy is currently selected

        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    exit()

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        self.pause_menu()
                        if self.reset_jeu:
                            return  # Exit if the reset flag is set after the pause menu
    
                    if event.key == pygame.K_TAB:
                        if not capacity_used:
                            self.display.capacity_choice(selected_unit)
                            self.display.draw_menu(selected_unit)
                            capacity_used = True  # Mark capacity as used
                        else:
                            self.display.affiche_message_centre("Vous avez choisi de ne pas utiliser de capacité")

                    elif event.key == pygame.K_a:
                        if enemies_in_range:
                            # Cycle to the next enemy
                            selected_enemy_index = (selected_enemy_index + 1) % len(enemies_in_range)

                    elif event.key == pygame.K_SPACE:
                        if enemies_in_range:
                            enemy = enemies_in_range[selected_enemy_index]
                            damage = selected_unit.attack_with_animation(enemy, self, self.screen)
                            self.display.affiche_message_haut(f"{selected_unit.__class__.__name__} inflicted {damage} damage to {enemy.__class__.__name__}!")

                            if enemy.vie <= 0:
                                self.display.affiche_message_haut(f"{enemy.__class__.__name__} was defeated!")
                                self.player2_units.remove(enemy)
                                self.check_victory()
                            return
                        return

            # Update the display and highlight the selected enemy
            self.display.flip_display_basic(selected_unit)

            # Outline only the currently selected enemy in red
            for i, enemy in enumerate(enemies_in_range):
                enemy_rect = pygame.Rect(enemy.x * CELL_SIZE, enemy.y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
                if i == selected_enemy_index:
                    pygame.draw.rect(self.screen, (255, 0, 0), enemy_rect, 5)  # Thicker border for the selected enemy
                else:
                    pygame.draw.rect(self.screen, (255, 0, 0), enemy_rect, 1)  # Thinner border for others

            pygame.display.flip()

    def handle_player2_attack(self, selected_unit):
        capacity_used = False  # Flag to track if capacity has been used during this turn

        if self.reset_jeu:
            return  # Exit immediately if reset_jeu is True

        if selected_unit:
            # Show action options when unit is selected
            self.display.affiche_message_centre("Que voulez-vous faire ? Attaquer (A), Utiliser une capacité (Tab) puis attaquer")

        # Find enemies within attack range
        enemies_in_range = [
            enemy for enemy in self.player1_units
            if max(abs(enemy.x - selected_unit.x), abs(enemy.y - selected_unit.y)) <= selected_unit.attack_range
        ]

        selected_enemy_index = 0  # Index to track which enemy is currently selected

        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    exit()

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        self.pause_menu()
                        if self.reset_jeu:
                            return  # Exit if the reset flag is set after the pause menu

                    if event.key == pygame.K_TAB:
                        if not capacity_used:
                            self.display.capacity_choice(selected_unit)
                            self.display.draw_menu(selected_unit)
                            capacity_used = True  # Mark capacity as used
                        else:
                            self.display.affiche_message_centre("Capacité déjà utilisée pendant ce tour")

                    elif event.key == pygame.K_a:
                        if enemies_in_range:
                            # Cycle to the next enemy
                            selected_enemy_index = (selected_enemy_index + 1) % len(enemies_in_range)

                    elif event.key == pygame.K_SPACE:
                        if enemies_in_range:
                            enemy = enemies_in_range[selected_enemy_index]
                            damage = selected_unit.attack_with_animation(enemy, self, self.screen)
                            self.display.affiche_message_centre(f"{selected_unit.__class__.__name__} inflicted {damage} damage to {enemy.__class__.__name__}!")

                            if enemy.vie <= 0:
                                self.display.affiche_message_centre(f"{enemy.__class__.__name__} was defeated!")
                                self.player1_units.remove(enemy)
                                self.check_victory()
                            return
                        return

            # Update the display and highlight the selected enemy
            self.display.flip_display_basic(selected_unit)

            # Outline only the currently selected enemy in red
            for i, enemy in enumerate(enemies_in_range):
                enemy_rect = pygame.Rect(enemy.x * CELL_SIZE, enemy.y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
                if i == selected_enemy_index:
                    pygame.draw.rect(self.screen, (255, 0, 0), enemy_rect, 5)  # Thicker border for the selected enemy
                else:
                    pygame.draw.rect(self.screen, (255, 0, 0), enemy_rect, 1)  # Thinner border for others

            pygame.display.flip()
        
def main():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.FULLSCREEN)
    pygame.display.set_caption("Mon jeu de stratégie")
    
    while True:
        # Create a fresh game instance and display instance each time we restart
        game = Game(screen)
        display = Display(screen, game)
        
        # Display the character selection screen
        display.initialize_main_menu()
        display.character_choice_screen()

        # Start the game loop
        running = True
        while running:
            # Handle player 1's turn by moving all units one by one
            for unit in game.player1_units:
                unit.is_selected = True
                game.handle_player_turn(unit)
                game.handle_player1_attack(unit)
                unit.recup_energie()
                unit.is_selected = False  # Deselect the unit after moving

            # Handle player 2's turn by moving all units one by one
            for unit in game.player2_units:
                unit.is_selected = True
                game.handle_player_turn(unit)
                game.handle_player2_attack(unit)
                unit.recup_energie()
                unit.is_selected = False  # Deselect the unit after moving

            # Check if the game has been reset (e.g., when returning to the main menu)
            if game.reset_jeu:
                running = False  # Exit the game loop to restart the main loop

        # Optional: Clear the screen for a fresh start
        screen.fill((0, 0, 0))
        pygame.display.flip()

if __name__ == "__main__":
    main()
